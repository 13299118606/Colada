// Colada includes
#include "qColadaSegyReader.h"
#include "qColadaSegyReader_p.h"
#include "qComboBoxDelegate.h"
#include "qSpinBoxDelegate.h"
#include "qScienceSpinBoxDelegate.h"
#include "qREValidator.h"
#include "qLineEditDelegate.h"
#include "qPathEditDelegate.h"
#include "../Core/ColadaUtil.h"

// Qt includes
#include <QLayout>
#include <QMessageBox>
#include <QRadioButton>

// CTK includes
#include <ctkFileDialog.h>

// h5geo includes
#include <h5geo/h5core.h>

// magic_enum includes
#include <magic_enum.hpp>

qColadaSegyReaderPrivate::qColadaSegyReaderPrivate(qColadaSegyReader &q)
    : Superclass(q) {}

qColadaSegyReaderPrivate::~qColadaSegyReaderPrivate() {}

void qColadaSegyReaderPrivate::init() {
  Q_Q(qColadaSegyReader);
  this->Superclass::init(); // must be before current class initialization
  initVars();
  initTable();
}

void qColadaSegyReaderPrivate::initVars() {
  QStringList segyTableHdrNames = {
      "plot",      "read file", "save as",      "survey type",
      "data type", "domain",    "text encoding", "endianness",
      "format",    "SRD",       "SAMP_START",   "SAMP_RATE_MULT"};
  QStringList segyTableHdrTips = {
      "Plot SEGY",
      "Read file",
      "Save as",
      "2D/3D",
      "STACK, PRESTACK and ATTRIBUTE (velocity model or other attributes)",
      "May be time or depth",
      "Textual header encoding",
      "SEGY endianness",
      "SEGY format",
      "Seismic Reference Datum (meters)",
      "First sample (ms or meters)",
      "Sampling rate multiplier: downwards is negative (usually -1))"};
  tableHdrNames = QStringList(
      {"plot", "read file", "save to", "CRS", "seis name", "creation type",
       "survey type", "data type", "domain", "text encoding", "endianness",
       "format", "spatial units", "SRD", "SAMP_START"});

  tableHdrTips = QStringList(
      {"Plot data", "Read file", "Container where to save data",
       "CRS authority name and code (example: EPSG:2000)",
       "Seismic name (if empty then name will be autogenerated)",
       "Creation type for seismic", "2D/3D",
       "STACK, PRESTACK and ATTRIBUTE (velocity model or other attributes)",
       "May be time or depth", "Textual header encoding", "SEGY endianness",
       " SEGY format", "Spatial units", "Seismic Reference Datum (meters)",
       "First sample (ms or meters)"});

  std::vector<std::string> fullHeaderNameList, shortHeaderNameList;
  h5geo::getBinHeaderNames(fullHeaderNameList, shortHeaderNameList);

  for (size_t i = 0; i < fullHeaderNameList.size(); i++) {
    tableHdrNames.push_back(QString::fromStdString(shortHeaderNameList[i]));
    tableHdrTips.push_back(QString::fromStdString(fullHeaderNameList[i]));
  }

  // comboDataMap["seis create"] = creationTypeMap.keys();
  // comboDataMap["survey type"] = surveyTypeMap.keys();
  // comboDataMap["data type"] = seisDataTypeMap.keys();
  // comboDataMap["domain"] = seisDomainMap.keys();
  // comboDataMap["text encoding"] = txtEncodingMap.keys();
  // comboDataMap["endianness"] = segyEndianMap.keys();
  // comboDataMap["format"] = segyFormatMap.keys();
  // comboDataMap["spatial units"] = spatialUnitsMap.keys();

  spinboxColNameList = util::toQStringList(shortHeaderNameList);

  scSpinboxColNameList = QStringList({"SRD", "SAMP_START"});

  lineEditColNameList = QStringList({"seis name"});

  pathEditColNameList = QStringList({"save to"});
}

void qColadaSegyReaderPrivate::initTable() {
  model->setColumnCount(tableHdrNames.count());
  model->setHorizontalHeaderLabels(tableHdrNames);
  for (int i = 0; i < model->columnCount(); i++) {
    model->horizontalHeaderItem(i)->setToolTip(tableHdrTips[i]);
  }

  /* ComboBoxDelegate */
  util::setComboDelegateFromEnumClassForTable<h5geo::CreationType>(
      tableView, tableHdrNames.indexOf("creation type"));
  util::setComboDelegateFromEnumClassForTable<h5geo::SurveyType>(
      tableView, tableHdrNames.indexOf("survey type"));
  util::setComboDelegateFromEnumClassForTable<h5geo::SeisDataType>(
      tableView, tableHdrNames.indexOf("data type"));
  util::setComboDelegateFromEnumClassForTable<h5geo::Domain>(
      tableView, tableHdrNames.indexOf("domain"));
  util::setComboDelegateFromEnumClassForTable<h5geo::TxtEncoding>(
      tableView, tableHdrNames.indexOf("text encoding"));
  util::setComboDelegateFromEnumClassForTable<h5geo::SegyEndian>(
      tableView, tableHdrNames.indexOf("endianness"));
  util::setComboDelegateFromEnumClassForTable<h5geo::SegyFormat>(
      tableView, tableHdrNames.indexOf("format"));
  util::setComboDelegateFromEnumClassForTable<h5geo::SpatialUnits>(
      tableView, tableHdrNames.indexOf("spatial units"));

  /* qSpinBoxDelegate */
  qSpinBoxDelegate *spinBoxDelegate = new qSpinBoxDelegate(0);
  spinBoxDelegate->setParent(tableView);
  for (auto &name : spinboxColNameList) {
    int col = tableHdrNames.indexOf(name);
    tableView->setItemDelegateForColumn(col, spinBoxDelegate);
  }

  /* ScienceSpinBoxDelegate */
  qScienceSpinBoxDelegate *scienceSpinBoxDelegate =
      new qScienceSpinBoxDelegate();
  scienceSpinBoxDelegate->setParent(tableView);
  for (auto &name : scSpinboxColNameList) {
    int col = tableHdrNames.indexOf(name);
    tableView->setItemDelegateForColumn(col, scienceSpinBoxDelegate);
  }

  /* LineEditDelegate */
  QRegularExpression re = util::fileNameRegExp();
  qREValidator *validator =
      new qREValidator(
      re, util::fileNameNoSpaceToolTipText(), 3000);
  qLineEditDelegate *lineEditDelegate =
      new qLineEditDelegate(QString(), validator, tableView);
  validator->setParent(lineEditDelegate);
  for (auto &name : lineEditColNameList) {
    int col = tableHdrNames.indexOf(name);
    tableView->setItemDelegateForColumn(col, lineEditDelegate);
  }

  /* PathEditDelegate */
  qPathEditDelegate *pathDelegate = new qPathEditDelegate();
  pathDelegate->setParent(tableView);
  for (auto &name : pathEditColNameList) {
    int col = tableHdrNames.indexOf(name);
    tableView->setItemDelegateForColumn(col, pathDelegate);
  }
}

qColadaSegyReader::qColadaSegyReader(QWidget *parent)
    : qColadaReader(new qColadaSegyReaderPrivate(*this), parent) {
  Q_D(qColadaSegyReader);
  d->init();
}

qColadaSegyReader::~qColadaSegyReader() {}

void qColadaSegyReader::updateRow(int row) {}

void qColadaSegyReader::resetRow(int row) {}

void qColadaSegyReader::onAddBtnClicked() {
  Q_D(qColadaSegyReader);
  QStringList fileNames = ctkFileDialog::getOpenFileNames(
      nullptr, QObject::tr("Select one or more SEGY files to open"), "",
      QObject::tr("SEGY (*.seg *.sgy *.segy);; all (*.*)"));

  for (auto name : fileNames) {
    if (!d->model
             ->findItems(name, Qt::MatchFixedString,
                         d->tableHdrNames.indexOf("read file"))
             .isEmpty()) {
      QMessageBox::warning(this, "Warning", name + ": is already in table!");
      continue;
    }

    d->model->insertRow(d->model->rowCount());
    int row = d->model->rowCount() - 1;

    d->tableView->setIndexWidget(
        d->proxy->index(row, d->tableHdrNames.indexOf("plot")),
        new QRadioButton());

    QStandardItem *readFileItem = new QStandardItem(name);
    readFileItem->setFlags(readFileItem->flags() & ~Qt::ItemIsEditable);
    d->model->setItem(row, d->tableHdrNames.indexOf("read file"), readFileItem);

    resetRow(row);
    updateRow(row);

    d->model->verticalHeaderItem(row)->setText(
        QString::number(d->model->rowCount()));
  }
}

// void qColadaSegyReader::onRemoveToolBtnClicked() {
//  Q_D(qColadaSegyReader);
//  QModelIndexList indexList = d->tableView->selectionModel()->selectedRows();
//  QList<int> rowList;
//
//  for (QModelIndex &index : indexList)
//    rowList.push_back(index.row());
//
//  /* to remove rows correctly we should remove them in descending order */
//  std::sort(rowList.rbegin(), rowList.rend()); // descending order sort
//
//  for (int &row : rowList)
//    d->model->removeRow(row);
//
//  for (int row = 0; row < d->tableView->model()->rowCount(); row++)
//    d->model->verticalHeaderItem(row)->setText(QString::number(row + 1));
//}

// void qColadaSegyReader::onAutoDefineToolBtnClicked() {
//  Q_D(qColadaSegyReader);
//  QModelIndexList indexList = d->tableView->selectionModel()->selectedRows();
//  for (QModelIndex &index : indexList)
//    updateRow(index.row());
//}

void qColadaSegyReader::onButtonBoxClicked(QAbstractButton *button) {}

// void qColadaSegyReader::onDataChanged(const QModelIndex &topLeft,
//                                  const QModelIndex &bottomRight,
//                                  const QVector<int> &roles) {}
