//// Colada includes
//#include "qColadaDevReader.h"
//#include "qColadaDevReader_p.h"
//#include "ColadaUtil.h"
//#include "qCRSDropTableView.h"
//#include "qComboBoxDelegate.h"
//#include "qLineEditDelegate.h"
//#include "qPathEditDelegate.h"
//#include "qREValidator.h"
//#include "qScienceSpinBoxDelegate.h"
//#include "qSpinBoxDelegate.h"
//
//// Qt includes
//#include <QComboBox>
//#include <QDialogButtonBox>
//#include <QFileDialog>
//#include <QMessageBox>
//#include <QPushButton>
//#include <QRadioButton>
//#include <QStandardItem>
//#include <QStandardItemModel>
//#include <QToolButton>
//
//// CTK includes
//#include <ctkCheckableHeaderView.h>
//#include <ctkPathLineEdit.h>
//
//// h5geo includes
//#include <h5geo/h5core.h>
//#include <h5geo/h5well.h>
//#include <h5geo/h5wellcontainer.h>
//
//qColadaDevReaderPrivate::qColadaDevReaderPrivate(qColadaDevReader &q)
//    : Superclass(q) {}
//
//qColadaDevReaderPrivate::~qColadaDevReaderPrivate() {}
//
//void qColadaDevReaderPrivate::init() {
//  Q_Q(qColadaDevReader);
//  this->Superclass::init(); // must be before current class initialization
//  initVars();
//  initTable();
//}
//
//void qColadaDevReaderPrivate::initVars() {
//  tableHdrNames = QStringList({"plot",          "read file",
//                               "save to",       "CRS",
//                               "dev name",      "well create",
//                               "dev create",    "skip lines",
//                               "delimiter",     "trajectory format",
//                               "spatial units", "angle units",
//                               "coord_1 col",   "coord_2 col",
//                               "coord_3 col",   "depth mult",
//                               "well type",     "UWI",
//                               "well name",     "head x",
//                               "head y",        "KB"});
//
//  tableHdrTips = QStringList(
//      {"Plot data",
//       "Read file",
//       "Container where to save data",
//       "CRS authority name and code (example: EPSG:2000)",
//       "Deviation curve name (if empty then name will be autogenerated)",
//       "Creation type for well",
//       "Creation type for deviation",
//       "Number of lines to skip",
//       "Delimiter",
//       "Trajectory format",
//       "Spatial units",
//       "Angle units",
//       "First coordinate column",
//       "Second coordinate column",
//       "Third coordinate column",
//       "Depth multiplier: downwards is negative (usually -1)",
//       "Well type",
//       "Unique Well Identifier",
//       "Well name",
//       "Header X coordinate",
//       "Header Y coordinate",
//       "Kelly Bushing"});
//
//  spinboxColNameList = QStringList({"skip lines", "depth mult", "coord_1 col",
//                                    "coord_2 col", "coord_3 col"});
//
//  scSpinboxColNameList = QStringList({"head x", "head y", "KB"});
//
//  lineEditColNameList = QStringList({"UWI", "well name"});
//
//  pathEditColNameList = QStringList({"save to"});
//}
//
//void qColadaDevReaderPrivate::initTable() {
//  model->setColumnCount(tableHdrNames.count());
//  model->setHorizontalHeaderLabels(tableHdrNames);
//  for (int i = 0; i < model->columnCount(); i++) {
//    model->horizontalHeaderItem(i)->setToolTip(tableHdrTips[i]);
//  }
//
//  /* ComboBoxDelegate */
//  util::setComboDelegateFromEnumClassForTable<h5geo::CreationType>(
//      tableView, tableHdrNames.indexOf("well create"));
//  util::setComboDelegateFromEnumClassForTable<h5geo::CreationType>(
//      tableView, tableHdrNames.indexOf("dev create"));
//  util::setComboDelegateFromEnumClassForTable<h5geo::Delimiter>(
//      tableView, tableHdrNames.indexOf("delimiter"));
//  util::setComboDelegateFromEnumClassForTable<h5geo::SpatialUnits>(
//      tableView, tableHdrNames.indexOf("spatial units"));
//  util::setComboDelegateFromEnumClassForTable<h5geo::AngleUnits>(
//      tableView, tableHdrNames.indexOf("angle units"));
//  util::setComboDelegateFromEnumClassForTable<h5geo::WellType>(
//      tableView, tableHdrNames.indexOf("well type"));
//
//  /* SpinBoxDelegate */
//  qSpinBoxDelegate *spinBoxDelegate = new qSpinBoxDelegate(0);
//  spinBoxDelegate->setParent(tableView);
//  for (auto &name : spinboxColNameList) {
//    int col = tableHdrNames.indexOf(name);
//    tableView->setItemDelegateForColumn(col, spinBoxDelegate);
//  }
//
//  /* ScienceSpinBoxDelegate */
//  qScienceSpinBoxDelegate *scienceSpinBoxDelegate =
//      new qScienceSpinBoxDelegate();
//  scienceSpinBoxDelegate->setParent(tableView);
//  for (auto &name : scSpinboxColNameList) {
//    int col = tableHdrNames.indexOf(name);
//    tableView->setItemDelegateForColumn(col, scienceSpinBoxDelegate);
//  }
//
//  /* LineEditDelegate */
//  QRegularExpression re = util::fileNameRegExp();
//  qREValidator *validator =
//      new qREValidator(re, util::fileNameToolTipText(), 3000, tableView);
//  qLineEditDelegate *lineEditDelegate =
//      new qLineEditDelegate(QString(), validator, tableView);
//  for (auto &name : lineEditColNameList) {
//    int col = tableHdrNames.indexOf(name);
//    tableView->setItemDelegateForColumn(col, lineEditDelegate);
//  }
//
//  /* PathEditDelegate */
//  qPathEditDelegate *pathDelegate = new qPathEditDelegate();
//  pathDelegate->setParent(tableView);
//  for (auto &name : pathEditColNameList) {
//    int col = tableHdrNames.indexOf(name);
//    tableView->setItemDelegateForColumn(col, pathDelegate);
//  }
//}
//
//qColadaDevReader::qColadaDevReader(QWidget *parent)
//    : qColadaReader(new qColadaDevReaderPrivate(*this), parent) {
//  Q_D(qColadaDevReader);
//  d->init();
//}
//
//qColadaDevReader::~qColadaDevReader() {}
//
//void qColadaDevReader::updateRow(int row) {
//  Q_D(qColadaDevReader);
//
//  QString readFile =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("read file")))
//          .toString();
//  QString delimiterStr =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("delimiter")))
//          .toString();
//  auto delimiter =
//      magic_enum::enum_cast<h5geo::Delimiter>(delimiterStr.toStdString());
//  if (!delimiter.has_value()) {
//    return;
//  }
//
//  DevRead devRead(readFile, delimiter);
//
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("well name")),
//                 devRead.getWellName());
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("UWI")),
//                 devRead.getUWI());
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("well type")),
//                 devRead.getWellType());
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("KB")),
//                 devRead.getKB());
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("head x")),
//                 devRead.getHeadXCoord());
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("head y")),
//                 devRead.getHeadYCoord());
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("skip lines")),
//                 devRead.getSkipLines());
//
//  /* */
//  QString trajFormatStr =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("trajectory format")))
//          .toString();
//  auto trajFormat = magic_enum::enum_cast<h5geo::TrajectoryFormat>(
//      trajFormatStr.toStdString());
//  if (!trajFormat.has_value()) {
//    return;
//  }
//
//  if (trajFormat == h5geo::TrajectoryFormat::MD_AZIM_INCL) {
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")),
//                   devRead.getColNum("MD") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")),
//                   devRead.getColNum("AZIM") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")),
//                   devRead.getColNum("INCL") + 1);
//  } else if (trajFormat == h5geo::TrajectoryFormat::TVD_X_Y) {
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")),
//                   devRead.getColNum("TVD") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")),
//                   devRead.getColNum("X") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")),
//                   devRead.getColNum("Y") + 1);
//  } else if (trajFormat == h5geo::TrajectoryFormat::TVD_DX_DY) {
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")),
//                   devRead.getColNum("TVD") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")),
//                   devRead.getColNum("DX") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")),
//                   devRead.getColNum("DY") + 1);
//  } else if (trajFormat == h5geo::TrajectoryFormat::TVDSS_X_Y) {
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")),
//                   devRead.getColNum("Z") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")),
//                   devRead.getColNum("X") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")),
//                   devRead.getColNum("Y") + 1);
//  } else if (trajFormat ==
//             h5geo::TrajectoryFormat::TVDSS_DX_DY) {
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")),
//                   devRead.getColNum("Z") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")),
//                   devRead.getColNum("DX") + 1);
//    d->model->setData(
//        d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")),
//                   devRead.getColNum("DY") + 1);
//  }
//}
//
//void qColadaDevReader::resetRow(int row) {
//  Q_D(qColadaDevReader);
//
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("delimiter")),
//                 "SPACE");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("well create")),
//                 "CREATE_OR_OVERWRITE");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("dev create")),
//                 "CREATE_OR_OVERWRITE");
//  d->model->setData(d->model->index(row, d->tableHdrNames.indexOf("delimiter")),
//                 "SPACE");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("trajectory format")),
//                 "MD_AZIM_INCL");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("spatial units")),
//                 "METER");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("angle units")),
//                 "DEGREE");
//  d->model->setData(
//      d->model->index(row, d->tableHdrNames.indexOf("depth mult")),
//                    -1);
//}
//
//DevRead::Param qColadaDevReader::getParamFromTable(int row, QString &errMsg) {
//  Q_D(qColadaDevReader);
//
//  QVariant var;
//  DevRead::Param p;
//  p.readFile =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("read file")))
//          .toString();
//  p.saveFile =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("save to")))
//                   .toString();
//  p.crs = d->model->data(d->model->index(row, d->tableHdrNames.indexOf("CRS")))
//              .toString();
//  p.devCurveName =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("dev name")))
//          .toString();
//  p.wellName =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("well name")))
//          .toString();
//  p.uwi = d->model->data(d->model->index(row, d->tableHdrNames.indexOf("UWI")))
//              .toString();
//
//  std::string str;
//  str = d->model
//            ->data(d->model->index(
//                row, d->tableHdrNames.indexOf("trajectory format")))
//            .toString()
//            .toStdString();
//  auto trajFormat_opt = magic_enum::enum_cast<h5geo::TrajectoryFormat>(str);
//  if (!trajFormat_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `trajectory format`!";
//    return p;
//  }
//  p.trajFormat = trajFormat_opt;
//
//  str = d->model
//            ->data(d->model->index(
//                row, d->tableHdrNames.indexOf("well type")))
//            .toString()
//            .toStdString();
//  auto wellType_opt = magic_enum::enum_cast<h5geo::WellType>(str);
//  if (!wellType_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `well type`!";
//    return p;
//  }
//  p.wellType = wellType_opt;
//
//  str = d->model
//            ->data(d->model->index(row, d->tableHdrNames.indexOf("well create")))
//            .toString()
//            .toStdString();
//  auto wellCreateType_opt = magic_enum::enum_cast<h5geo::CreationType>(str);
//  if (!wellCreateType_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `well create`!";
//    return p;
//  }
//  p.wellCreateType = wellCreateType_opt;
//
//  str = d->model
//            ->data(d->model->index(row, d->tableHdrNames.indexOf("dev create")))
//            .toString()
//            .toStdString();
//  auto devCreateType_opt = magic_enum::enum_cast<h5geo::CreationType>(str);
//  if (!devCreateType_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `dev create`!";
//    return p;
//  }
//  p.devCreateType = devCreateType_opt;
//
//  str = d->model
//            ->data(d->model->index(row, d->tableHdrNames.indexOf("spatial units")))
//            .toString()
//            .toStdString();
//  auto spatialUnits_opt = magic_enum::enum_cast<h5geo::SpatialUnits>(str);
//  if (!spatialUnits_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `spatial units`!";
//    return p;
//  }
//  p.spatialUnits = spatialUnits_opt;
//
//  str = d->model
//            ->data(
//                d->model->index(row, d->tableHdrNames.indexOf("angle units")))
//            .toString()
//            .toStdString();
//  auto angleUnits_opt = magic_enum::enum_cast<h5geo::AngleUnits>(str);
//  if (!angleUnits_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `angle units`!";
//    return p;
//  }
//  p.angleUnits = angleUnits_opt;
//
//  str =
//      d->model
//          ->data(d->model->index(row, d->tableHdrNames.indexOf("delimiter")))
//          .toString()
//          .toStdString();
//  auto delimiter_opt = magic_enum::enum_cast<h5geo::Delimiter>(str);
//  if (!delimiter_opt.has_value()) {
//    errMsg = p.readFile + ": Inapropriate `delimiter`!";
//    return p;
//  }
//  p.delimiter = delimiter_opt;
//
//  var = d->model->data(d->model->index(row, d->tableHdrNames.indexOf("KB")));
//  if (var.isNull())
//    p.kb = qQNaN();
//  else
//    p.kb = var.toDouble();
//
//  var = d->model->data(d->model->index(row, d->tableHdrNames.indexOf("head x")));
//  if (var.isNull())
//    p.headX = qQNaN();
//  else
//    p.headX = var.toDouble();
//
//  var = d->model->data(d->model->index(row, d->tableHdrNames.indexOf("head y")));
//  if (var.isNull())
//    p.headY = qQNaN();
//  else
//    p.headY = var.toDouble();
//
//  p.skipLines =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("skip lines")))
//          .toUInt();
//  p.coordCol1 =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("coord_1 col")))
//          .toUInt() -
//      1;
//  p.coordCol2 =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("coord_2 col")))
//          .toUInt() -
//      1;
//  p.coordCol3 =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("coord_3 col")))
//          .toUInt() -
//      1;
//  p.depthMult =
//      d->model->data(d->model->index(row, d->tableHdrNames.indexOf("depth mult")))
//          .toInt();
//  return p;
//}
//
//void qColadaDevReader::onAddBtnClicked() {
//  Q_D(qColadaDevReader);
//
//  QStringList fileNames = QFileDialog::getOpenFileNames(
//      this, tr("Select one or more DEV files to open"), QDir::currentPath(),
//      "DEV (*.dev);; DAT (*.dat);; TXT (*.txt);; all (*.*)");
//
//  for (auto name : fileNames) {
//    if (!d->model
//             ->findItems(name, Qt::MatchFixedString,
//                         d->tableHdrNames.indexOf("read file"))
//             .isEmpty()) {
//      QMessageBox::warning(this, "Warning", name + ": is already in table!");
//      continue;
//    }
//
//    d->model->insertRow(d->model->rowCount());
//    int row = d->model->rowCount() - 1;
//
//    d->tableView->setIndexWidget(d->proxy->index(row, d->tableHdrNames.indexOf("plot")),
//                              new QRadioButton());
//
//    QStandardItem *readFileItem = new QStandardItem(name);
//    readFileItem->setFlags(readFileItem->flags() & ~Qt::ItemIsEditable);
//    d->model->setItem(row, d->tableHdrNames.indexOf("read file"), readFileItem);
//
//    resetRow(row);
//    updateRow(row);
//
//    d->model->verticalHeaderItem(row)->setText(QString::number(model->rowCount()));
//  }
//}
//
//void qColadaDevReader::onButtonBoxClicked(QAbstractButton *button) {
//  Q_D(qColadaDevReader);
//
//  if (button == d->buttonBox->button(QDialogButtonBox::Ok)) {
//    for (int i = 0; i < d->model->rowCount(); i++) {
//      DevRead::Param p = getParamFromTable(i);
//      QString errMsg;
//      DevRead::read(p, errMsg);
//      if (!errMsg.isEmpty()) {
//        QMessageBox msgBox;
//        msgBox.setIcon(QMessageBox::Critical);
//        msgBox.setText(tr(errMsg.toStdString().c_str()));
//        msgBox.exec();
//        continue;
//      }
//    }
//  } else if (button == d->buttonBox->button(QDialogButtonBox::Cancel)) {
//    this->close(); // close this widget
//  }
//}
